## sign

```
sign(txJSON: string, secret: string, options: object): {signedTransaction: string, id: string}
sign(txJSON: string, keypair: object, options: object): {signedTransaction: string, id: string}
```

Sign a prepared transaction. The signed transaction must subsequently be [submitted](#submit).

This method can sign any of [the transaction types supported by 'casinocoin-libjs-binary-codec'](https://github.com/casinocoin/casinocoin-libjs-binary-codec/blob/cfcde79c19c359e9a0466d7bc3dc9a3aef47bb99/src/enums/definitions.json#L1637). When a new transaction type is added to the CSC Ledger, it will be unrecognized until `'casinocoin-libjs-binary-codec'` is updated. If you try to sign an unrecognized transaction type, this method throws an error similar to the following:

`Error: [TRANSACTION_TYPE] is not a valid name or ordinal for TransactionType`

### Parameters

<%- renderSchema("input/sign.json") %>

### Return Value

This method returns an object with the following structure:

<%- renderSchema("output/sign.json") %>

### Example

```javascript
const txJSON = '{"Flags":2147483648,"TransactionType":"AccountSet","Account":"cLPp8TAuVgFP45vDyrLrG73xmVV6CDJjRb","Domain":"636173696E6F636F696E2E6F7267","LastLedgerSequence":8820051,"Fee":"12","Sequence":23}';
const secret = 'ssvkaUEUiqVoVBLxSPYEs2kFnuFZ4';
const keypair = { privateKey: '00ACCD3309DB14D1A4FC9B1DAE608031F4408C85C73EE05E035B7DC8B25840107A', publicKey: '02F89EAEC7667B30F33D0687BBA86C3FE2A08CCA40A9186C5BDE2DAA6FA97A37D8' };
return api.sign(txJSON, secret); // or: api.sign(txJSON, keypair);
```

<%- renderFixture("responses/sign.json") %>
